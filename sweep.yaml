# Sweep AI turns bugs & feature requests into code changes (https://sweep.dev)
# For details on our config file, check out our docs at https://docs.sweep.dev/usage/config
rules:
  - "Keep all docstrings and comments updated for easy understanding."
  - "Include docstrings for functions and file headers to aid interpretation."
  - "Break down large functions to enhance readability and performance where possible."
  - "Ensure all new code comes with corresponding easy-to-understand unit tests."
  - "Add descriptive docstrings to modules and their public functions for clarity."
  - "Write unit tests for new code within a 'tests/' directory, understandable by all."
  - "Refactor or optimize inefficient or repeated code for better comprehension and efficiency."
  - "Develop code mindful of hardware and open-source limitations."
  - "Opt for command line interfaces for accessibility, excluding GUI applications."
  - "Redirect debug information to a log file for seamless and persistent debugging."
  - "Implement policies to limit rates or retries, reducing operational load."
  - "Adhere to the PEP8 style guide for consistent Python code readability."
  - "Follow REST API standards with hardcoded implementation for clarity."
  - "Utilize /src/api/TaskBotAPI.md to establish and standardize new protocols, incorporating the return code system detailed within."
  - "Document architecture-wide APIs and a SQLite3 database in respective directories."
  - "Ensure RunTimeAgent_ operates within Docker containers, maintaining a sandboxed environment."
  - "Strive for continuity in cognitive processes via robust cognitive architectures and clean, traversable cognitive data structures."
  - "Cognitive processes should be single-layer abstractions in an OOP-style application."
  - "Implement and manage non-cognitive parent processes for handling errors and debugging in cognitive processes."
  - "Minimize computational strain and offload behavior from resource-intensive kernels and RunTimeAgent_ where feasible."

branch: 'main'
gha_enabled: True
description: 'github.com/MOONLAPSED/cognosis is an evolving OS-level application designed for Linux that focuses on making a more-coherent way to interact with deamons, processes, and other UFS-objects.'
draft: False
blocked_dirs: "/logs/"
docs:
  PyGitHub: "We use PyGitHub @ https://pygithub.readthedocs.io/en/latest/"
  Linux_kernel: "We use Linux_kernel @ https://www.kernel.org/doc/html/latest/index.html"
  ELF_files: "We use ELF_files @ https://flint.cs.yale.edu/cs422/doc/ELF_Format.pdf"
  LLVM: "We use LLVM @ https://llvm.org/docs/CommandGuide/index.html"
  gcc: "We use gcc @ https://gcc.gnu.org/onlinedocs/gcc/"
  Autogen: "We use Autogen @ https://microsoft.github.io/autogen/docs/Use-Cases/enhanced_inference"
  AGiXT: "We use AGiXT @ https://github.com/Josh-XT/AGiXT"
  AgentGPT: "We use AgentGPT @ https://github.com/reworkd/AgentGPT"
  VLLM: "We use VLLM @ https://vllm.readthedocs.io/en/latest/"
  Nvidia_NeMo: "We use Nvidia_NeMo @ https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/"
  deepspeed_docs: "We use deepspeed_docs @ https://www.deepspeed.ai/training/"
  deepspeed_repo: "We use deepspeed_repo @ https://github.com/microsoft/deepspeed-mii"
  LMOps_repo: "We use LMOps_repo @ https://github.com/microsoft/lmops"
  minilm: "We use minilm @ https://mohitmayank.com/a_lazy_data_science_guide/natural_language_processing/minilm/"
  Transformers: "We use Transformers @ https://huggingface.co/docs/transformers/main_classes/model"
  STOMP_protocol: "We use STOMP protocol @ https://stomp.github.io/stomp-specification-1.2.html"
  Backus_Naur_form: "We use augmented BNF packets from RFC2616 @ https://datatracker.ietf.org/doc/html/rfc2616#section-2.1"

sandbox:
  install:
    - trunk init
  check:
    - trunk fmt {file_path} || return 0
    - trunk check --fix --print-failures {file_path}

Research_targets:
  - "What abstraction exists (at the kernel-level of a linux os) which may allow us to break the Halting Problem for an affiliated agent but not quantum irreducibility and/or thermodynamics or entropy?"
  - "Draft an algorithm in the control theory-sense of the term that doesn't violate universal constants but does trick the Halting Problem - an axiomatic algorithm for our runtime agent. An abstraction from the hardware such that we can avoid the halting situation?"
  - "Optimization through Parallel Computing: Investigate and implement techniques involving Single Instruction, Multiple Data (SIMD), parallel processing, Message Passing Interface (MPI), threading, and optimizing code for efficient utilization of CPU cores."
  - "For example: SIMD, (gnu) parallel, mpi, threads, and systemd."
  - "Study the available docs! They are all about different but pertinent software that has been there and done that!"
